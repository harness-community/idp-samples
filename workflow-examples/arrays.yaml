apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: react-ssr-template
  title: Example Simple Text with Basic Validations
  description: Example of templates with Simple Text Input
  tags:
    - recommended
    - react
spec:
  owner: web@example.com
  type: website
  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - owner
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        description:
          title: Repository Description
          type: string
          default: gp2
          enum:
            - gp2
            - gp3
            - io1
            - io2
            - sc1
            - st1
            - standard
          enumNames:
            - 'New Repository (gp2)'
            - 'New Repository (gp3)'
            - 'Scaffolder Repostory (io1)'
            - 'Scaffolder Repostory (io2)'
            - 'New Service (sc1)'
            - 'New Service Provisoned using IDP (st1)'
            - 'Repository Created Using Self Service Workflows (standard)'
        owner:
          title: Owner
          type: string
          description: Owner of the component 
          default: 'Platform Engineering'
          enum:
            - 'Build and Tools'
            - 'SRE'
            - 'Cloud Engineering'
            - 'Platform Engineering'
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          owner: ${{ parameters.owner }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
